---
layout: post
title: "Conway's Game of Life"
category: Programming
date: 2013-04-04
location: Jakarta, Indonesia 
author: Muhammad Fuad Hasan
published: true
---

The Game of Life, also known simply as Life, is a cellular automaton devised by
a mathematician named [John Horton Conway][jhw] in 1970. The Game of Life
emerged as Conway's attempt to drastically simplify John von Neumann's ideas
which tried to find a hypothetical machine that could build copies of itself.
From a theoretical point of view, it is interesting because it has the power of
a universal Turing machine: that is, anything that can be computed
algorithmically can be computed within Conway's Game of Life. Martin Gardner
wrote in "Mathematical Games" column on Scientific American (October 1970):

> The game made Conway instantly famous, but it also opened up a whole new field
> of mathematical research, the field of cellular automata... Because of Life's
> analogies with the rise, fall and alterations of a society of living
> organisms, it belongs to a growing class of what are called "simulation games"
> (games that resemble real life processes).

The game can also serve as a didactic analogy, used to convey the somewhat
counter-intuitive notion that "design" and "organization" can spontaneously
emerge in the absence of a designer. For example, philosopher and cognitive
scientist Daniel Dennett has used the analogue of Conway's Life "universe"
extensively to illustrate the possible evolution of complex philosophical
constructs, such as consciousness and free will, from the relatively simple
set of deterministic physical laws governing our own universe.

__Rules__  
The universe of the Game of Life is an infinite two-dimensional orthogonal grid
of square cells, each of which is in one of two possible states, alive or dead.
Every cell interacts with its eight neighbours, which are the cells that are
horizontally, vertically, or diagonally adjacent. At each step in time, the
following transitions occur:

1. Any live cell with fewer than two live neighbours dies, as if caused by
under-population.
2. Any live cell with two or three live neighbours lives on to the next
generation.
3. Any live cell with more than three live neighbours dies, as if by
overcrowding.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if
by reproduction.

The initial pattern constitutes the seed of the system. The first generation is
created by applying the above rules simultaneously to every cell in the
seedâ€”births and deaths occur simultaneously, and the discrete moment at which
this happens is sometimes called a tick (in other words, each generation is a
pure function of the preceding one). The rules continue to be applied repeatedly
to create further generations.

__Code__  
Sample implementation in Perl:

``` perl
my $w = `tput cols` - 1;
my $h = `tput lines` - 1;
my $r = "\033[H";

my @universe = map([ map(rand(1) < .1, 1 .. $w) ], 1 .. $h);
sub iterate {
    my @new = map([ map(0, 1 .. $w) ], 1 .. $h);
    for my $i (0 .. $h - 1) {
    for my $j (0 .. $w - 1) {
        my $neighbor = 0;
        for (   [-1, -1], [-1, 0], [-1, 1],
            [ 0, -1],      [ 0, 1],
            [ 1, -1], [ 1, 0], [ 1, 1] )
        {
            my $y = $_->[0] + $i;
            my $x = $_->[1] + $j;
            $neighbor += $universe[$y % $h][$x % $w];
            last if $neighbor > 3;
        }

        $new[$i][$j] = $universe[$i][$j]
            ? ($neighbor == 2 or $neighbor == 3)
            : $neighbor == 3;
    }}
    @universe = @new;
}

while(1) {
    print $r;
    print map((map($_ ? "#" : " ", @$_), "\n"), @universe);
    iterate;
}
```

Code's output takes up whole area of terminal to show evolution of its patterns.

(This note's content copied and edited from Wikipedia and Rosettacode)

[jhw]: http://en.wikipedia.org/wiki/John_Horton_Conway

